name: CI/CD com Docker Compose, Cloud Run e Firebase Hosting

on:
  push:
    branches:
      - homolog
  release:
    types:
      - published
      - created
      - edited

jobs:
  build-docker:
    name: ⚙️ Build & Push Docker
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      REGION: southamerica-east1
      SERVICE: tormentator-front
    steps:
      - uses: actions/checkout@v4
      - name: Autenticar no GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Configurar gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      - name: Definir REPO
        run: echo "REPO=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/tormentator-front/${{ env.SERVICE }}" >> $GITHUB_ENV
      - name: Build via Docker Compose
        run: docker compose -f docker-compose.yaml build
      - name: Taggear e enviar imagem
        run: |
          if [[ "${{ github.ref_name }}" == "homolog" ]]; then
            TAG="homolog"
          elif [[ "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ && github.event_name == 'release' ]]; then
            TAG="${{ github.ref_name }}"
          else
            TAG="latest"
          fi
          echo "TAG=$TAG" >> $GITHUB_ENV
          docker tag tormentator-front:latest $REPO:$TAG
          docker push $REPO:$TAG
          echo "$TAG" > tag.txt
      - uses: actions/upload-artifact@v4
        with:
          name: image-tag
          path: tag.txt

  deploy-homolog-cloudrun:
    name: 🧪 Deploy Homolog (Cloud Run)
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref_name == 'homolog'
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      REGION: southamerica-east1
      REPOSITORY: tormentator-front
      SERVICE: tormentator-front-homolog
    steps:
      - uses: actions/download-artifact@v4
        with: { name: image-tag }
      - name: Definir REPO
        run: echo "REPO=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/tormentator-front/${{ env.REPOSITORY }}" >> $GITHUB_ENV
      - name: Obter TAG
        run: echo "TAG=$(cat tag.txt)" >> $GITHUB_ENV
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          image: ${{ env.REPO }}:${{ env.TAG }}
          region: ${{ env.REGION }}
          flags: --allow-unauthenticated

  deploy-homolog-hosting:
    name: 🧪 Deploy Homolog (Firebase Hosting)
    runs-on: ubuntu-latest
    needs: deploy-homolog-cloudrun
    if: github.ref_name == 'homolog'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
          target: homolog-tormentator
          channelId: live

  notify-homolog-discord:
    name: 📢 Notificar Discord (Homologação)
    runs-on: ubuntu-latest
    needs: deploy-homolog-hosting
    if: github.ref_name == 'homolog'
    env:
      DISCORD_WEBHOOK_HOMOLOG: ${{ secrets.DISCORD_WEBHOOK_HOMOLOG }}
    steps:
      - name: Notificar Discord
        run: |
          curl -X POST $DISCORD_WEBHOOK_HOMOLOG \
          -H "Content-Type: application/json" \
          -d '{
            "content": "Deploy da branch homolog realizado com sucesso!",
            "embeds": [
              {
                "title": "Informações do Deploy",
                "fields": [
                  {
                    "name": "Branch",
                    "value": "${{ github.ref_name }}",
                    "inline": true
                  },
                  {
                    "name": "Commit",
                    "value": "${{ github.sha }}",
                    "inline": true
                  }
                ]
              }
            ]
          }'

  deploy-prod-cloudrun:
    name: 🚀 Deploy Produção (Cloud Run)
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'release'
    environment: production
    permissions:
      contents: read
      id-token: write
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      REGION: southamerica-east1
      REPOSITORY: tormentator-front
      SERVICE: tormentator-front
    steps:
      - uses: actions/download-artifact@v4
        with: { name: image-tag }
      - name: Definir REPO
        run: echo "REPO=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/tormentator-front/${{ env.REPOSITORY }}" >> $GITHUB_ENV
      - name: Obter TAG
        run: echo "TAG=$(cat tag.txt)" >> $GITHUB_ENV
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          image: ${{ env.REPO }}:${{ env.TAG }}
          region: ${{ env.REGION }}
          flags: --allow-unauthenticated

  deploy-prod-hosting:
    name: 🚀 Deploy Produção (Firebase Hosting)
    runs-on: ubuntu-latest
    needs: deploy-prod-cloudrun
    if: github.event_name == 'release'
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
          target: tormentator
          channelId: live

  deploy-prod-discord:
    name: 📢 Notificar Discord (Produção)
    runs-on: ubuntu-latest
    needs: deploy-prod-hosting
    if: github.event_name == 'release'
    environment: production
    env:
      DISCORD_WEBHOOK_PROD: ${{ secrets.DISCORD_WEBHOOK_PROD }}
    steps:
      - name: Notificar Discord
        run: |
          curl -X POST $DISCORD_WEBHOOK_PROD \
          -H "Content-Type: application/json" \
          -d '{
            "content": "Nova versão do Tormentator disponível!",
            "embeds": [
              {
                "title": "${{ github.event.release.body }}",
                "fields": [
                  {
                    "name": "Versão",
                    "value": "${{ github.ref_name }}",
                    "inline": true
                  }
                ]
              }
            ]
          }'
